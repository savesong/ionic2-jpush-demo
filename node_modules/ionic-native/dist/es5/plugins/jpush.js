"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * This is a template for new plugin wrappers
 *
 * TODO:
 * - Add/Change information below
 * - Document usage (importing, executing main functionality)
 * - Remove any imports that you are not using
 * - Add this file to /src/index.ts (follow style of other plugins)
 * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs.
 * - Remove this note
 *
 */
var plugin_1 = require("./plugin");
/**
 * @name JPush
 * @description
 * This plugin does something
 *
 * @usage
 * ```
 * import { JPush } from 'ionic-native';
 *
 * JPush.functionName('Hello', 123)
 *   .then((something: any) => doSomething(something))
 *   .catch((error: any) => console.log(error));
 *
 * ```
 */
var JPush = (function () {
    function JPush() {
    }
    /**
     * This function does something
     * @param arg1 {string} Some param to configure something
     * @param arg2 {number} Another param to configure something
     * @return {Promise<any>} Returns a promise that resolves when something happens
     */
    JPush.init = function () { return; };
    JPush.stopPush = function () { return; };
    JPush.resumePush = function () { return; };
    JPush.isPushStopped = function () { return; };
    JPush.getRegistrationID = function () { return; };
    JPush.setTagsWithAlias = function (tags, alias) { return; };
    JPush.setTags = function (tags) { return; };
    JPush.setAlias = function (alias) { return; };
    JPush.setBadge = function (value) { return; };
    JPush.resetBadge = function () { return; };
    JPush.getUserNotificationSettings = function () { return; };
    JPush.isPlatformIOS = function () { return; };
    JPush.getApplicationIconBadgeNumber = function () { return; };
    return JPush;
}());
__decorate([
    plugin_1.Cordova()
], JPush, "init", null);
__decorate([
    plugin_1.Cordova()
], JPush, "stopPush", null);
__decorate([
    plugin_1.Cordova()
], JPush, "resumePush", null);
__decorate([
    plugin_1.Cordova()
], JPush, "isPushStopped", null);
__decorate([
    plugin_1.Cordova()
], JPush, "getRegistrationID", null);
__decorate([
    plugin_1.Cordova()
], JPush, "setTagsWithAlias", null);
__decorate([
    plugin_1.Cordova()
], JPush, "setTags", null);
__decorate([
    plugin_1.Cordova()
], JPush, "setAlias", null);
__decorate([
    plugin_1.Cordova()
], JPush, "setBadge", null);
__decorate([
    plugin_1.Cordova()
], JPush, "resetBadge", null);
__decorate([
    plugin_1.Cordova()
], JPush, "getUserNotificationSettings", null);
__decorate([
    plugin_1.Cordova()
], JPush, "isPlatformIOS", null);
__decorate([
    plugin_1.Cordova({
        callbackOrder: 'reverse'
    })
], JPush, "getApplicationIconBadgeNumber", null);
JPush = __decorate([
    plugin_1.Plugin({
        pluginName: 'JPush',
        plugin: 'jpush-phonegap-plugin',
        pluginRef: 'plugins.jPushPlugin',
        repo: 'https://github.com/jpush/jpush-phonegap-plugin',
        platforms: ['Android', 'iOS']
    })
], JPush);
exports.JPush = JPush;
//# sourceMappingURL=jpush.js.map